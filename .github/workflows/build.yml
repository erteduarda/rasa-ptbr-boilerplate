# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: build_bot

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          cd bot/
          pip install --upgrade pip
          pip install flake8
      - name: Lint with flake8
        run: |
          cd bot/
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  validate:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          cd bot/
          cp .env.example .env || touch .env
          export $(grep -v '^#' .env.example | xargs) || true
          pip install --upgrade pip
          pip install rasa==$RASA_VERSION
          pip install rasa-model-report==1.5.0
      - name: Validate and train
        run: |
          cd bot/
          rasa data validate
          rm ../bot/endpoints.yml || true
          rm ../bot/credentials.yml || true
          sed -i "s/epochs.*$/epochs: 15/" ./config.yml
          make train
      - name: Upload trained model
        uses: actions/upload-artifact@v4
        with:
          name: rasa-model
          path: bot/models/

  test:
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
      - name: Download trained model
        uses: actions/download-artifact@v4
        with:
          name: rasa-model
          path: bot/models/
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          cd bot/
          cp .env.example .env || touch .env
          export $(grep -v '^#' .env.example | xargs) || true
          pip install --upgrade pip
          pip install rasa==$RASA_VERSION
          pip install rasa-sdk==$RASA_SDK_VERSION
          pip install jq
      - name: Setup test environment and start services
        run: |
          cd bot/
          cat > credentials-test.yml << EOF
          socketio:
            user_message_evt: user_uttered
            bot_message_evt: bot_uttered
            session_persistence: true
          rest:
          EOF
          cat > endpoints-test.yml << EOF
          action_endpoint:
            url: "http://localhost:5055/webhook"
          tracker_store:
            type: "in_memory"
          EOF
          rasa run actions --actions actions &
          sleep 5
          rasa run -m models/ --endpoints endpoints-test.yml --credentials credentials-test.yml --enable-api --cors '*' --port 5005 &
          sleep 15
          curl --connect-timeout 10 --max-time 15 --retry 30 --retry-delay 10 --retry-max-time 300 --retry-connrefused 'http://localhost:5005'
      - name: Run tests
        run: |
          cd bot/
          # Test intent recognition
          intent1=$(curl -s -X POST http://localhost:5005/model/parse -H 'Content-Type: application/json' -d '{"text": "OlÃ¡"}' | jq -r '.intent.name')
          intent2=$(curl -s -X POST http://localhost:5005/model/parse -H 'Content-Type: application/json' -d '{"text": "bom dia"}' | jq -r '.intent.name')
          intent3=$(curl -s -X POST http://localhost:5005/model/parse -H 'Content-Type: application/json' -d '{"text": "sim"}' | jq -r '.intent.name')
          if [ "$intent1" != "cumprimentar" ] && [ "$intent2" != "cumprimentar" ] && [ "$intent3" != "afirmar" ]; then
            exit 1
          fi
          response=$(curl -s -XPOST http://localhost:5005/webhooks/rest/webhook -H 'Content-Type: application/json' -d '{"sender":"default","message":"OlÃ¡"}')
          if [ -z "$response" ]; then
            exit 1
          fi
          # Run Rasa tests
          rasa test --no-plot
